name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.12

    - name: Cache Python packages
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
        key: ${{ runner.os }}-python-${{ hashFiles('**/requirements/*.txt') }}
        restore-keys: |
          ${{ runner.os }}-python-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ./requirements/requirements_app.txt
        pip install pytest

    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 .

    - name: Run tests
      run: |
        export PYTHONPATH=.
        pytest

    - name: Build Docker image with BuildKit
      run: |
        DOCKER_BUILDKIT=1 docker build --cache-from=ogulcanakca/stock-prediction-app-for-AWS-EC2 -t ogulcanakca/stock-prediction-app-for-AWS-EC2:${{ github.sha }} .

    - name: Push Docker images to Docker Hub
      run: |
        IMAGE_TAG="ogulcanakca/stock-prediction-app-for-AWS-EC2:${{ github.sha }}"
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        docker tag $IMAGE_TAG ogulcanakca/stock-prediction-app-for-AWS-EC2:latest
        docker push $IMAGE_TAG
        docker push ogulcanakca/stock-prediction-app-for-AWS-EC2:latest

    - name: Deploy to AWS EC2
      run: |
        echo "${{ secrets.SSH_KEY }}" > /tmp/id_rsa
        chmod 600 /tmp/id_rsa
        ssh -t -o StrictHostKeyChecking=no -i /tmp/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
        if [ ! -d "/home/ubuntu/TimeSeriesForecastAPI-with-AWS-EC2" ]; then
          git clone git@github.com:ogulcanakca/TimeSeriesForecastAPI-with-AWS-EC2.git /home/ubuntu/TimeSeriesForecastAPI-with-AWS-EC2
        fi
        cd /home/ubuntu/TimeSeriesForecastAPI-with-AWS-EC2
        git pull origin main
        if [ -f "docker-compose.yaml" ]; then
          docker-compose pull
          docker-compose up -d
        else
          echo "docker-compose.yaml file not found!"
          exit 1
        fi
        EOF
      env:
        SSH_KEY: ${{ secrets.SSH_KEY }}
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
    
